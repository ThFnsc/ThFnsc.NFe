@using ThFnsc.NFe.Models.ScheduledGeneration
@using ThFnsc.NFe.Core.Services

@inject NFContext _context
@inject IMapper _mapper
@inject IJSRuntime _js
@inject ScheduledGenerationAppService _sgApp
@inject IEnumerable<INFNotifier> _notifierServices

<LoadableList Items="_list">
    <TList Items="_list">
        <TableHeader>
            <td>CRON</td>
            <td>Notificadores</td>
            <td>Prestador</td>
            <td>Tomador</td>
            <td>Valor</td>
            <td>Alíquota</td>
            <td>Descrição do serviço</td>
            <td>Id Serviço</td>
            <td>Ações</td>
        </TableHeader>
        <Row Context="item">
            <td>@item.CronPattern</td>
            <td>
                @foreach (var notifier in item.Notifiers)
                {
                    <div>(@(_notifierServices.SingleOrDefault(s=>s.GetType().FullName == notifier.NotifierType)?.GetType().GetDisplayName() ?? "INVÁLIDO")) @notifier.Title</div>
                }
            </td>
            <td>@item.Provider.Issuer.Name</td>
            <td>@item.ToDocument.Name</td>
            <td>R$@item.Value</td>
            <td>@item.AliquotPercentage%</td>
            <td>@item.ServiceDescription</td>
            <td>@item.ServiceId</td>
            <td>
                <div class="btn btn-group">
                    <button class="btn btn-@(item.Enabled ? "success":"danger") btn-sm" @onclick="()=>ToggleEnableAsync(item)"><span class="oi oi-power-standby"></span></button>
                    <button class="btn btn-primary btn-sm" @onclick="()=>OnEdit.InvokeAsync(item.Id)"><span class="oi oi-pencil"></span></button>
                    <button class="btn btn-danger btn-sm" @onclick="()=>DeleteAsync(item)"><span class="oi oi-trash"></span></button>
                </div>
            </td>
        </Row>
    </TList>
</LoadableList>

@code {
    private List<ScheduledGenerationModel> _list;

    [Parameter]
    public EventCallback<int> OnEdit { get; set; }

    protected override Task OnInitializedAsync() =>
        UpdateAsync();

    public async Task UpdateAsync()
    {
        _list = null;
        StateHasChanged();
        _list = await _context.ScheduledGenerations
            .Active()
            .ProjectTo<ScheduledGenerationModel>(_mapper.ConfigurationProvider)
            .ToListAsync();
        StateHasChanged();
    }

    public async Task ToggleEnableAsync(ScheduledGenerationModel sg)
    {
        var onDb = await _sgApp.ToggleEnableAsync(sg.Id);
        sg.Enabled = onDb.Enabled;
    }

    public async Task DeleteAsync(ScheduledGenerationModel item)
    {
        if (!await _js.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir esse agendamento?"))
            return;
        await _sgApp.DeleteAsync(item.Id);
        _list.Remove(item);
    }
}
