@using ThFnsc.NFe.Core.Services
@using ThFnsc.NFe.Models.Provider

@inject NFContext _context
@inject IMapper _mapper
@inject IJSRuntime _js
@inject IEnumerable<ITownHallApiClient> _clients

<LoadableList Items="_list">
    <TList Items="_list">
        <TableHeader>
            <td>Documento</td>
            <td>Prefeitura</td>
            <td>Ações</td>
        </TableHeader>
        <Row Context="item">
            <td>@item.Issuer.DocIdentifier @item.Issuer.Name</td>
            <td>@(_clients.SingleOrDefault(n=>n.GetType().FullName == item.TownHallType)?.GetType().GetDisplayName() ?? "NÃO ENCONTRADA!")</td>
            <td>
                <div class="btn btn-group">
                    <button class="btn btn-primary btn-sm" @onclick="()=>OnEdit.InvokeAsync(item.Id)"><span class="oi oi-pencil"></span></button>
                    <button class="btn btn-danger btn-sm" @onclick="()=>DeleteAsync(item)"><span class="oi oi-trash"></span></button>
                </div>
            </td>
        </Row>
    </TList>
</LoadableList>

@code {
    private List<ProviderModel> _list;

    [Parameter]
    public EventCallback<int> OnEdit { get; set; }

    protected override Task OnInitializedAsync() =>
        UpdateAsync();

    public async Task UpdateAsync()
    {
        _list = null;
        StateHasChanged();
        _list = await _context.Providers
            .Active()
            .ProjectTo<ProviderModel>(_mapper.ConfigurationProvider)
            .ToListAsync();
        StateHasChanged();
    }

    public async Task DeleteAsync(ProviderModel item)
    {
        if (!await _js.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir esse prestador?"))
            return;
        var onDb = await _context.Providers
            .Active()
            .OfId(item.Id)
            .SingleAsync();
        onDb.Delete();
        await _context.SaveChangesAsync();
        _list.Remove(item);
    }
}
