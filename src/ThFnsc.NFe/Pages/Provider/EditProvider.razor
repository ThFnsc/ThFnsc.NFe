@using ThFnsc.NFe.Models.Provider
@using System.Reflection
@using ThFnsc.NFe.Core.Services
@using System.Text.Json

@inject NFContext _context
@inject IMapper _mapper
@inject IEnumerable<ITownHallApiClient> _apiClients

@if (_model is null || _documents is null)
{
    <Loader />
}
else
{
    <EditForm Model="_model" OnValidSubmit="SaveAsync" class="row g-3">
        <DataAnnotationsValidator />
        <div class="col-lg-6">
            <LabelFor For="() => _model.DocumentId" />
            <InputSelect @bind-Value="_model.DocumentId" class="form-control">
                <option value="">Selecionar</option>
                @foreach (var item in _documents)
                    {
                    <option value="@item.Key">@item.Value</option>
                    }
            </InputSelect>
            <ValidationMessage For="()=>_model.DocumentId" />
        </div>

        <div class="col-lg-6">
            <LabelFor For="() => _model.TownHallType" />
            <InputSelect @bind-Value="_model.TownHallType" class="form-control">
                <option value="">Selecionar</option>
                @foreach (var item in _townHalls)
                {
                    <option value="@item.Key">@item.Value.title</option>
                }
            </InputSelect>
            <ValidationMessage For="()=>_model.TownHallType" />
        </div>

        <div class="col-lg-12">
            <Accordion>
                <Heading>
                    <Name For="()=>_model.Data" />
                </Heading>
                <Content>
                    <InputJson ModelType="string.IsNullOrWhiteSpace(_model.TownHallType) ? typeof(object) : _townHalls[_model.TownHallType].client.DataType" @bind-Value="_model.Data" class="form-control" />
                </Content>
            </Accordion>
            <ValidationMessage For="()=>_model.Data" />
        </div>

        <div class="col-12">
            <div class="btn-group">
                @if (_model.Id == 0)
                {
                    <button type="submit" class="btn btn-success">Criar <Loader Button="true" Visible="_processing" /></button>
                }
                else
                {
                    <button type="submit" class="btn btn-primary">Salvar <Loader Button="true" Visible="_processing" /></button>
                    <button type="button" class="btn btn-secondary" @onclick="()=>_model=new()">Novo</button>
                }
            </div>
        </div>
    </EditForm>
}

@code {
    private EditProviderModel _model = new();
    private Provider _editing;
    private bool _processing;
    private IDictionary<int, string> _documents;

    private Dictionary<string, (ITownHallApiClient client, string title)> _townHalls;

    [Parameter]
    public EventCallback<ProviderModel> OnUpdate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _townHalls= _apiClients.ToDictionary(n => n.GetType().FullName, n => (n, n.GetType().GetDisplayName()));

        _documents = await _context.Documents
            .Active()
            .Select(d => new { d.Id, d.DocIdentifier, d.Name })
            .ToDictionaryAsync(d => d.Id, d => $"{d.DocIdentifier} {d.Name}");
    }

    public async Task EditAsync(int id)
    {
        _processing = true;
        _model = null;
        StateHasChanged();
        _editing = await _context.Providers
            .Active()
            .OfId(id)
            .Include(d => d.Issuer)
            .SingleAsync();
        _model = _mapper.Map<EditProviderModel>(_editing);
        _processing = false;
        StateHasChanged();
    }

    private async Task SaveAsync()
    {
        if (_model.Id == 0)
        {
            _processing = true;
            var issuer = await _context.Documents.Active().OfId(_model.DocumentId.Value).SingleAsync();
            var provider = new Provider(issuer, _model.Data, _model.TownHallType);
            _context.Add(provider);
            await _context.SaveChangesAsync();
            _model = new();
            await OnUpdate.InvokeAsync();
            _processing = false;
        }
        else
        {
            _editing.Delete();
            _model.Id = 0;
            await SaveAsync();
        }
    }
}
