@inject NFContext _context
@inject IMapper _mapper
@using ThFnsc.NFe.Models.MailTemplate

@if (_model is null)
{
    <Loader />
}
else
{
    <EditForm Model="_model" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator/>
        <div class="mb-3">
            <div class="form-group">
                <LabelFor For="()=>_model.Name" />
                <InputText @bind-Value="_model.Name" class="form-control" />
                <ValidationMessage For="()=>_model.Name" />
            </div>
            <div class="form-group">
                <LabelFor For="()=>_model.Subject" />
                <InputTextArea @bind-Value="_model.Subject" class="form-control" />
                <ValidationMessage For="()=>_model.Subject" />
            </div>
            <div class="form-group">
                <LabelFor For="()=>_model.Body" />
                <InputTextArea @bind-Value="_model.Body" class="form-control" />
                <ValidationMessage For="()=>_model.Body" />
            </div>
        </div>
        @if (_model.Id == 0)
        {
            <button type="submit" class="btn btn-success">Criar <Loader Button="true" Visible="_processing" /></button>
        }
        else
        {
            <div class="btn-group">
                <button type="submit" class="btn btn-primary">Salvar <Loader Button="true" Visible="_processing" /></button>
                <button type="button" class="btn btn-secondary" @onclick="()=>_model=new()">Novo</button>
            </div>
        }
    </EditForm>
}

@code {
    private EditMailTemplateModel _model = new();
    private MailTemplate _editing;
    private bool _processing;

    [Parameter]
    public EventCallback<MailTemplateModel> OnUpdate { get; set; }

    public async Task EditAsync(int id)
    {
        _processing = true;
        _model = null;
        StateHasChanged();
        _editing = await _context.MailTemplates
            .Active()
            .OfId(id)
            .SingleAsync();
        _model = _mapper.Map<EditMailTemplateModel>(_editing);
        _processing = false;
        StateHasChanged();
    }

    private async Task SaveAsync()
    {
        _processing = true;
        if (_model.Id == 0)
            _context.Add(new MailTemplate(_model.Name, _model.Subject, _model.Body));
        else
            _editing.Update(_model.Name, _model.Subject, _model.Body);
        
        await _context.SaveChangesAsync();
        _model = new();
        await OnUpdate.InvokeAsync();
        _processing = false;
    }
}
