@using ThFnsc.NFe.Models.NFe
@using ThFnsc.NFe.Core.Services

@inject NFContext _context
@inject NavigationManager _navManager
@inject IMapper _mapper
@inject NFeAppService _nfe
@inject IJSRuntime _js
@inject IEnumerable<INFNotifier> _notifiers
@inject NotificationAppService _notification

<Alert @ref="_alert"/>
<LoadableList Items="_nfes">
    <TList Items="_nfes">
        <TableHeader>
            <td>Data</td>
            <td>Série</td>
            <td>Valor</td>
            <td>Cód. Verif.</td>
            <td>De</td>
            <td>Para</td>
            <td>Ações</td>
        </TableHeader>
        <Each Context="nf">
            @{var statusColor = nf.Success.HasValue
                  ? nf.Success.Value
                      ? "success"
                      : "danger"
                  : "warning";
            }
            <tr class="text-@statusColor">
                <td>@nf.IssuedAt</td>
                <td>@nf.Series</td>
                <td>R$@nf.Value.ToString("0.00")</td>
                <td>@nf.VerificationCode</td>
                <td>@nf.Provider.Issuer.Name</td>
                <td>@nf.DocumentTo.Name</td>
                <td>
                    <div class="btn-group">
                        @if(nf.LinkToNF == null)
                        {
                            <button class="btn btn-primary btn-sm" title="Baixar PDF" @onclick='() => _navManager.NavigateTo($"PDF/{nf.Id}", true)'>
                                <span class="oi oi-document"></span>
                            </button>
                            <button class="btn btn-primary btn-sm" title="Baixar XML" @onclick='() => _navManager.NavigateTo($"XML/{nf.Id}", true)'>
                                <span class="oi oi-code"></span>
                            </button>
                        }
                        else
                        {
                            <a href=@nf.LinkToNF target="_blank" class="btn btn-primary btn-sm" title="Acessar NF">
                                <span class="oi oi-external-link"></span>
                            </a>
                        }
                        
                        <button class="btn btn-success btn-sm" title="Notificar" @onclick='() => NotifyAsync(nf)'>
                            <span class="oi oi-bell"></span>
                        </button>
                        @if (nf.Success is null || !nf.Success.Value)
                        {
                            <button class="btn btn-danger btn-sm" @onclick='() => DeleteAsync(nf)'>
                                <span class="oi oi-trash"></span>
                            </button>
                        }
                    </div>
                </td>
            </tr>
        </Each>
    </TList>
</LoadableList>

@code {
    private List<NFModel> _nfes;
    private Alert _alert;

    public void AddNFe(IssuedNFe nfe) =>
        _nfes.Insert(0, _mapper.Map<NFModel>(nfe));

    protected override async Task OnInitializedAsync()
    {
        _nfes = await _context.NFes
            .Active()
            .OrderByDescending(n=>n.Success)
                .ThenByDescending(n=>n.Series)
            .ProjectTo<NFModel>(_mapper.ConfigurationProvider)
            .ToListAsync();
    }

    private async Task DeleteAsync(NFModel nfe)
    {

        await _nfe.DeleteAsync(nfe.Id);
        _nfes.Remove(nfe);
    }

    private async Task NotifyAsync(NFModel nfe)
    {
        var notifiers = await _context.NFNotifiers
            .Active()
            .Select(n => new
            {
                n.Id,
                n.Title,
                n.NotifierType
            })
            .ToListAsync();

        var names = _notifiers
            .ToDictionary(n => n.GetType().FullName, n => n.GetType().GetDisplayName());

        string notifierIndex = await _js.InvokeAsync<string>(
            "prompt",
            $"Selecione o notificador que deseja usar:\n{string.Join('\n', notifiers.Select((t, i) => $"  {i} => ({(names.TryGetValue(t.NotifierType, out string name) ? name : "INVÁLIDO")}) {t.Title}"))}");

        if (!(int.TryParse(notifierIndex, out var notifierIndexInt) && notifierIndexInt >= 0 && notifierIndexInt < notifiers.Count))
        {
            await _js.InvokeVoidAsync("alert", "Índice inválido. Cancelado");
            return;
        }

        try
        {
            await _notification.NotifyAsync(nfe.Id, notifiers[notifierIndexInt].Id);
            _alert.Show(Alert.AlertTypes.Success, "Notificado com sucesso!", null, TimeSpan.FromSeconds(5));
        } catch (Exception e)
        {
            _alert.Show(Alert.AlertTypes.Danger, e.Message, "Não foi possível enviar", TimeSpan.FromSeconds(15));
        }
    }
}